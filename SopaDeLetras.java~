import java.util.concurrent.TimeUnit;
import java.util.*;
import java.io.*;

public class SopaDeLetras implements Runnable{
    public String[][] sopa;
    public LinkedList<String> palabras;
    public String soluciones;
    // Las direcciones están dadas en el siguiente orden
    // N, S, E, O, NE, NO, SE, SO
    private int[] direcciones = {0,1,2,3,4,5,6,7};

    public SopaDeLetras(String[][] sopa,LinkedList<String> palabras){
	this.sopa = sopa;
	this.palabras = palabras;
    }

    public void secuencial(){
	this.secuencial(this.direcciones);
    }

    public void secuencial(int[] direcciones){
	int ancho = sopa.length;
	int largo = sopa[0].length;
	soluciones = "";
	for(int i = 0; i < ancho; i++){
	    for(int j = 0; j < largo; j++){
		for(String p : palabras){
		    for (int d : direcciones){
			if (busca(p,i,j,d)){
			    soluciones += p + " (" + j + "," + i + ") " + direccion(d) + "\n";
			}
		    }
		}
	    }	    
	}
    }

    public void concurrente(){
	try {
	    //Se crean dos hilos que ejecutan el metodo run()
	    Thread t1 = new Thread (this, "hilo1");
	    Thread t2 = new Thread (this, "hilo2");
	    Thread t3 = new Thread (this, "hilo3");
	    Thread t4 = new Thread (this, "hilo4");

	    t1.start (); t2.start (); t3.start (); t4.start ();

	    //Espera a que los hilos terminen
	    t1.join (); t2.join (); t3.join (); t4.join ();

	    //Imprime el contador
	} catch (InterruptedException e) {
	    System.out.println ("Se interrumpio el hilo!");
	}

    }
    
    public String direccion(int dirección){
	switch(dirección){
	    case 0:
	        return "N"; //Norte
	    case 1:
	        return "S"; //Sur
	    case 2:
	        return "E"; //Este
	    case 3:
	        return "O"; //Oeste
	    case 4:
	        return "NE"; //Norte //Este
	    case 5:
	        return "NO"; //Norte //Oeste
	    case 6:
	        return "SE";//Sur //Este
	    case 7:
	        return "SO"; //Sur //Oeste
	    default:
		return "";
	    }
    }
    
    public boolean busca(String palabra, int x, int y, int dirección) {
	// Que no se salga de la sopa
	if (x < 0 || y < 0 || x >= sopa.length || y >= sopa[0].length){
	    return false;
	}
	// ya acabó la palabra
	if (palabra.equals("")){
	    return true;
	}
	// coincide la letra
	if ((palabra.charAt(0)+"").equals(sopa[x][y])){
	    int nx = x, ny = y;
	    switch(dirección){
	    case 0:
		ny -= 1; //Norte
		break;
	    case 1:
		ny += 1; //Sur
		break;
	    case 2:
		nx -= 1; //Este
		break;
	    case 3:
		nx += 1; //Oeste
		break;
	    case 4:
		ny -= 1; //Norte
		nx -= 1; //Este
		break;
	    case 5:
		ny -= 1; //Norte
		nx += 1; //Oeste
		break;
	    case 6:
		ny += 1; //Sur
		nx -= 1; //Este
		break;
	    case 7:
		ny += 1; //Sur
		nx += 1; //Oeste
		break;
	    default:
		ny = 0;
		nx = 0;
		break;
	    }
	    return busca(palabra.substring(1),nx,ny,dirección);
	}
	// no coincide la letra
	else{
	    return false;
	}
    }

    public void run () {
	String nombre = Thread.currentThread().getName();
	int[] dirs = new int[2];
	switch(nombre){
	case "hilo1":
	    dirs[0] = 0;
	    dirs[1] = 1;
	    break;
	case "hilo2":
	    dirs[0] = 2;
	    dirs[1] = 3;
	    break;
	case "hilo3":
	    dirs[0] = 4;
	    dirs[1] = 5;
	    break;
	case "hilo4":
	    dirs[0] = 6;
	    dirs[1] = 7;
	    break;   
	}
	this.secuencial(dirs);
    }
    
    public void print(){
	for (String[] as : sopa){
	    for (String s : as){
		System.out.print(s+" ");
	    }
	    System.out.println();
	}
	System.out.println();
	for (String s : palabras){
		System.out.println(s);
	}
    }
    
    public static void main(String[] args){
	if (args.length != 3) {
	    System.out.println("Error ejecuta el programa bien.");
	    return;
	}
	String archivoSopa = args[1];
	String archivoPalabras = args[2];
	String opcion = args[0];
	String[][] entradaSopa;
        LinkedList<String> entradaPalabras = new LinkedList<>();

	// Leemos la sopirri
	BufferedReader lector;

	try {
	    lector =  new BufferedReader(new FileReader(archivoSopa));
	    String linea = lector.readLine();
	    String[] letras = linea.split("");
	    int n = letras.length;
	    entradaSopa = new String[n][n];
	    for(int i = 0; i < n; i++){
		entradaSopa[0][i] = letras[i];
	    }
	    for(int i = 1; i < n; i++){
		linea = lector.readLine();
		letras = linea.split("");
		for(int j = 0; j < n; j++){
		    entradaSopa[i][j] = letras[j];
		}
	    }
	}
	catch (IOException e){
	    e.printStackTrace();
	    System.out.println("Error al leer la entrada asegurece que el archivo está bien hecho.");	    
	    return;
	}

	// Ahora leemos las palabras
	try {
	    lector =  new BufferedReader(new FileReader(archivoPalabras));
	    String palabra;
	    while((palabra = lector.readLine()) != null){
	        entradaPalabras.add(palabra);
	    }
	}
	catch (IOException e){
	    e.printStackTrace();
	    System.out.println("Error al leer la entrada asegurece que el archivo está bien hecho.");	    
	    return;
	}

        SopaDeLetras sopita = new SopaDeLetras(entradaSopa,entradaPalabras);
        double startTime = 0.0;
        double endTime = 0.0;
        double timeElapsed = 0.0;
	
	System.out.println("Palabras encontradas:");
	if((opcion.toLowerCase()).equals("c")){
	    startTime = System.nanoTime();
	    sopita.concurrente();
	    endTime = System.nanoTime();
	    timeElapsed = endTime - startTime;
	}
	else if ((opcion.toLowerCase()).equals("s")) {
	    startTime = System.nanoTime();
	    sopita.secuencial();
	    endTime = System.nanoTime();
	    timeElapsed = endTime - startTime;
	}
	else {
	    System.out.println("Opción no valida");
	    return;
	}
	System.out.println();
	System.out.println(sopita.soluciones);
	System.out.println();	
	System.out.println("Tiempo de ejecución:"+Double.toString(timeElapsed/1000000)+" milisegundos");    	
    }
}

import java.util.concurrent.TimeUnit;
import java.util.*;
import java.io.*;

public class Matriz implements Runnable{
    public int[][] matriz;
    public int[][] resultado;

    public Matriz(int[][] matriz){
	this.matriz = matriz;
	int n = matriz[0].length;
	this.resultado = new int[n][n];
    }
    
    public void secuencial(){
	int n = matriz[0].length;
	this.secuencial(0,n,0,n);
    }

    public void secuencial(int s1, int e1,int s2, int e2){
	int n = matriz[0].length;
	for(int i = s1; i < e1; i++){
	    for(int j = s2; j < e2; j++){
		int i_j = 0;
		for (int k = 0; k < n; k++){
		    i_j += matriz[i][k]*matriz[k][j];
		}
	        this.resultado[i][j] = i_j;
	    }
	}
    }
    
    public void concurrente(){
	int n = matriz[0].length;

	try {
	    //Se crean dos hilos que ejecutan el metodo run()
	    Thread t1 = new Thread (this, "hilo1");
	    Thread t2 = new Thread (this, "hilo2");
	    Thread t3 = new Thread (this, "hilo3");
	    Thread t4 = new Thread (this, "hilo4");

	    t1.start (); t2.start (); t3.start (); t4.start ();

	    //Espera a que los hilos terminen
	    t1.join (); t2.join (); t3.join (); t4.join ();

	    //Imprime el contador
	} catch (InterruptedException e) {
	    System.out.println ("Se interrumpio el hilo!");
	}
    }
    
    public void run () {
	String nombre = Thread.currentThread().getName();
	int n = matriz[0].length;
	int n_half = matriz[0].length/2;
	int s1 = 0;
	int e1 = 0;
	int s2 = 0;
	int e2 = 0;
	switch(nombre){
	case "hilo1":
	    s1 = 0;
	    e1 = n_half;
	    s2 = 0;
	    e2 = n_half;
	    break;
	case "hilo2":
	    s1 = n_half;
	    e1 = n;
	    s2 = 0;
	    e2 = n_half;
	    break;
	case "hilo3":
	    s1 = 0;
	    e1 = n_half;
	    s2 = n_half;
	    e2 = n;
	    break;
	case "hilo4":
	    s1 = n_half;
	    e1 = n;
	    s2 = n_half;
	    e2 = n;
	    break;
	    
	}
	secuencial(s1,e1,s2,e2);
    }
    
    public void print(){
	for(int[] i : this.matriz){
	    for(int j : i){
		System.out.print(j+" ");
	    }
	    System.out.println();
	}
    }

    public void printResultado(){
	for(int[] i : this.resultado){
	    for(int j : i){
		System.out.print(j+" ");
	    }
	    System.out.println();
	}
    }

    public String toString(){
	String cadena = "";
	for(int[] i : this.matriz){
	    for(int j : i){
		cadena += j+" ";
	    }
	    cadena += "\n";
	}
	return cadena;
    }

    public String resultadoToString(){
	String cadena = "";;
	for(int[] i : this.resultado){
	    for(int j : i){
		cadena += j+" ";
	    }
	    cadena += "\n";
	}
	return cadena;
    }
    
    public static void main(String[] args){
	BufferedReader lector;
	if (args.length != 2){
	    System.out.println("Error ejecuta el programa bien.");
	    return;
	}
	String archivo = args[1];
	String opcion = args[0];
	int[][] entrada;

	try {
	    lector =  new BufferedReader(new FileReader(archivo));
	    String linea = lector.readLine();
	    String[] numeros = linea.split(" ");
	    int n = numeros.length;
	    entrada = new int[n][n];
	    for(int i = 0; i < n; i++){
		entrada[0][i] = Integer.parseInt(numeros[i]);
	    }
	    for(int i = 1; i < n; i++){
		linea = lector.readLine();
		numeros = linea.split(" ");
		for(int j = 0; j < n; j++){
		    entrada[i][j] = Integer.parseInt(numeros[j]);
		}
	    }
	}
	catch (IOException e){
	    e.printStackTrace();
	    System.out.println("Error al leer la entrada asegurece que el archivo está bien hecho.");	    
	    return;
	}
        
	Matriz the_matrix = new Matriz(entrada);
	System.out.println("Matriz Original:");
	the_matrix.print();
        double startTime = 0.0;
        double endTime = 0.0;
        double timeElapsed = 0.0;
	
	if((opcion.toLowerCase()).equals("c")){	
	    System.out.println("Matriz resultante después de algoritmo secuencial:");
	    startTime = System.nanoTime();
	    the_matrix.secuencial();
	    endTime = System.nanoTime();
	    timeElapsed = endTime - startTime;
	    the_matrix.print();
	    the_matrix.printResultado();
	    
	}
	else if ((opcion.toLowerCase()).equals("s")) {
	    System.out.println("Matriz resultante después de algoritmo concurrente:");
	    startTime = System.nanoTime();
	    the_matrix.concurrente();
	    endTime = System.nanoTime();
	    timeElapsed = endTime - startTime;
	    the_matrix.print();
	    the_matrix.printResultado();
	}
	else {
	    System.out.println("Opción no valida");
	    return;
	}
	System.out.println("Tiempo de ejecución:"+Double.toString(timeElapsed/1000000)+" milisegundos");    
	
	try{
	    BufferedWriter salida = new BufferedWriter( new FileWriter("producto.txt",false));
	    salida.write("Tiempo de ejecución:"+Double.toString(timeElapsed/1000000)+" milisegundos\n");
	    salida.write(the_matrix.resultadoToString());
	    salida.close();
	}
	catch (IOException e){
	    e.printStackTrace();
	    System.out.println("Error al escribir el resultado.");	    
	    return;
	}
	
    }
}

